{"version":3,"sources":["App.js","core.js","Story.js","order3.png","Theory.js","index.js"],"names":["App","props","handleChange","event","setState","groupSize","target","value","handleSubmit","state","preventDefault","BreakOut","m","PRIMES","SkipReminder","k","n","slice","p","reverse","ClosestPrimeSqrt","rounds","i","Array","j","t","u","x","y","AffineBreakOut","this","className","onSubmit","type","onChange","size","min","max","map","round","room","join","React","Component","Story","to","href","Theory","src","order3","alt","gist","wrapperClass","loadingClass","titleClass","contentClass","errorClass","Index","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90e8426f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { AffineBreakOut} from './core';\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {groupSize: 25};\n  }\n\n  handleChange = (event) => {\n      this.setState({groupSize: event.target.value});\n  };\n\n  handleSubmit = (event) => {\n      this.setState({groupSize: this.state.groupSize});\n      event.preventDefault();\n  };\n\n  render() {\n    const BreakOut = AffineBreakOut((this.state.groupSize > 1) ? this.state.groupSize : 2);\n\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit} className=\"Search\">\n          <label>\n            Your group size:\n            <input type=\"number\" value={this.state.groupSize} onChange={this.handleChange} size=\"3\" min=\"2\" max=\"121\"/> (2-121)\n          </label>\n        </form>\n        <div className=\"App-header\">\n          {\n            BreakOut.map((round, i) => (\n              <p>\n                <strong>Round {i + 1}</strong>: {round.map((room) => <span>[{room.join(\", \")}] </span>)}\n              </p>\n            ))\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","export const AffineBreakOut = (m) =>  {\n    const PRIMES = [1, 2, 3, 5, 7, 11];\n\n    const ClosestPrimeSqrt = () => {\n        let n = PRIMES.slice(-1)[0];\n        for (let p in PRIMES.reverse()) {\n            if (PRIMES[p] * PRIMES[p] >= m) {\n                n = PRIMES[p];\n            } else {\n                return n;\n            }\n        }\n    };\n\n    const SkipReminder = (k) => {\n        return (k < m) ? k : \"N\";\n    };\n\n    const n = ClosestPrimeSqrt();\n    let rounds = [n + 1];\n    for (let i = 0; i < n + 1; i++) {\n        rounds[i] = new Array(n);\n        for (let j = 0; j < n; j++) {\n            rounds[i][j] = new Array(n);\n        }\n    }\n\n    for (let t = 0; t < n; t++) {\n        for (let u = 0; u < n; u++) {\n            for (let x = 0; x < n; x++) {\n                rounds[t][u][x] = SkipReminder(x + ((t * x + u) % n) * n);\n            }\n        }\n    }\n\n    for (let x = 0; x < n; x++) {\n        for (let y = 0; y < n; y++) {\n            rounds[n][x][y] = SkipReminder(x + y * n);\n        }\n    }\n\n    return rounds\n};\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nfunction Story() {\n    return (\n        <div className=\"App\">\n            <div className=\"App-text\">\n                <p>\n                    Once upon a time, we wanted to split 21 people into reasonable sized groups over a couple of\n                    rounds such that everyone see each other exactly once. We couldn't solve it. Few years later,\n                    I looked back and realised that by using <em>affine planes</em> it can be easily <em>solved</em>.\n                </p>\n                <p>\n                    <em>Affine plane</em> is a concept in abstract algebra / geometry, which allows us to solve this\n                    problem. Therefore, the name - <em>Affine Break Out Room</em>. More details\n                    in the <Link to=\"./theory\">theory</Link> part.\n                </p>\n\n                <pre>\n                  Round 1: [0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10, 11, 12, 13, 14] [15, 16, 17, 18, 19] [20, N, N, N, N]<br />\n                  Round 2: [0, 6, 12, 18, N] [5, 11, 17, N, 4] [10, 16, N, 3, 9] [15, N, 2, 8, 14] [20, 1, 7, 13, 19]<br />\n                  Round 3: [0, 11, N, 8, 19] [5, 16, 2, 13, N] [10, N, 7, 18, 4] [15, 1, 12, N, 9] [20, 6, 17, 3, 14]<br />\n                  Round 4: [0, 16, 7, N, 14] [5, N, 12, 3, 19] [10, 1, 17, 8, N] [15, 6, N, 13, 4] [20, 11, 2, 18, 9]<br />\n                  Round 5: [0, N, 17, 13, 9] [5, 1, N, 18, 14] [10, 6, 2, N, 19] [15, 11, 7, 3, N] [20, 16, 12, 8, 4]<br />\n                  Round 6: [0, 5, 10, 15, 20] [1, 6, 11, 16, N] [2, 7, 12, 17, N] [3, 8, 13, 18, N] [4, 9, 14, 19, N]<br />\n                </pre>\n                <p>\n                    We are aware that there are other ways how to solve this problem, e.g. using <em>Kirkman\n                    Triple System</em>, which can split 21 people into 7 groups over 10 rounds perfectly. Other\n                    solutions are either inefficient (10 rounds per 3 people) or don't include all pairs. Therefore,\n                    affine plane sounds like reasonable solution for small group sizes. For other group sizes, I\n                    recommend to use <a href=\"http://breakoutroom.pythonanywhere.com/allocate/\">BoRAT</a> - a handy\n                    tool with a nice <a href=\"https://www.mdpi.com/2073-8994/13/1/13\">paper</a> about it.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Story;\n","export default __webpack_public_path__ + \"static/media/order3.a1fd2242.png\";","import order3 from './order3.png';\nimport React from 'react';\nimport ReactEmbedGist from 'react-embed-gist';\n\nfunction Theory() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-text\">\n        <p>\n          An affine plane is a two dimensional <a href=\"https://mathworld.wolfram.com/AffineGeometry.html\">affine geometry</a> constructed\n          over a <a href=\"https://en.wikipedia.org/wiki/Finite_field\">finite field</a> (or Galois field),\n          where points and lines satisfy those axioms: [1, 2]</p>\n\n          <ul>\n              <li>Given any two points, there is a unique line joining any two points.</li>\n              <li>Each line has at least two points.</li>\n              <li>Given a point <b>P</b> and a line <b>L</b> not containing <b>P</b>,\n                  there is a unique line that contains <b>P</b> and does not intersect <b>P</b></li>\n              <li>There exist three non-collinear points (points not on a single line)</li>\n          </ul>\n\n          <p>For an affine plane with finite number of points a following is true: [1]</p>\n          <ul>\n              <li>each line contains n points</li>\n              <li>each point is contained in <code>n + 1</code> distinct lines</li>\n              <li>there are <code>n<sup>2</sup></code> points in each line</li>\n              <li>there are <code>n<sup>2</sup> + n</code> lines</li>\n              <i>The number <code>n</code> is called the order of the affine plane.</i>\n          </ul>\n\n          <p>\n            Equivalently, we can replace <b>point</b> with <b>person</b> and <b>line</b> with <b>room</b>.\n            Therefore, we have:\n          </p>\n          <ul>\n              <li>each <em>room</em> contains <code>n</code> <em>persons</em></li>\n              <li>each <em>person</em> is in <code>n + 1</code> distinct <em>rooms</em></li>\n              <li>there are <code>n<sup>2</sup></code> <em>persons</em> in total</li>\n              <li>there are <code>n<sup>2</sup> + n</code> <em>rooms</em></li>\n          </ul>\n\n          <h3>Example: Affine plane of order 3 or how to break out 9 people</h3>\n          <p>\n            Let's take a field <strong>F<sub>3</sub></strong> with elements <code>{\"{0, 1, 2}\"}</code> with\n            addition and multiplication. [3]</p>\n          <table>\n              <tr>\n                  <th>+</th>\n                  <th>0</th>\n                  <th>1</th>\n                  <th>2</th>\n              </tr>\n              <tr>\n                  <th>0</th>\n                  <td>0</td>\n                  <td>1</td>\n                  <td>2</td>\n              </tr>\n              <tr>\n                  <th>1</th>\n                  <td>1</td>\n                  <td>2</td>\n                  <td>0</td>\n              </tr>\n              <tr>\n                  <th>2</th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td>1</td>\n              </tr>\n          </table>\n\n          <table>\n              <tr>\n                  <th>x</th>\n                  <th>0</th>\n                  <th>1</th>\n                  <th>2</th>\n              </tr>\n              <tr>\n                  <th>0</th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td>0</td>\n              </tr>\n              <tr>\n                  <th>1</th>\n                  <td>0</td>\n                  <td>1</td>\n                  <td>2</td>\n              </tr>\n              <tr>\n                  <th>2</th>\n                  <td>0</td>\n                  <td>2</td>\n                  <td>1</td>\n              </tr>\n          </table>\n\n          <p>\n            Now, each point is defined as a pair <code>(x, y) &isin; <strong>F<sub>3</sub><sup>2</sup></strong></code>,\n            therefore, the total number of points is <code>n<sup>2</sup></code>. Then we can draw lines given\n            by <code>y = mx + u</code>, where <code>m, k &isin; <strong>F<sub>3</sub><sup>2</sup></strong></code>.\n            Each <code>m</code> give us a set of distinct lines for each <code>k</code>.\n          </p>\n          <table className=\"big\">\n              <tr>\n                  <th>m=0</th>\n                  <th>x=0</th>\n                  <th>x=1</th>\n                  <th>x=2</th>\n                  <th>m=1</th>\n                  <th>x=0</th>\n                  <th>x=1</th>\n                  <th>x=2</th>\n              </tr>\n              <tr>\n                  <th>u=0</th>\n                  <td>0</td>\n                  <td>0</td>\n                  <td>0</td>\n                  <th>u=0</th>\n                  <td>0</td>\n                  <td>1</td>\n                  <td>2</td>\n              </tr>\n              <tr>\n                  <th>u=1</th>\n                  <td>1</td>\n                  <td>1</td>\n                  <td>1</td>\n                  <th>u=1</th>\n                  <td>1</td>\n                  <td>2</td>\n                  <td>0</td>\n              </tr>\n              <tr>\n                  <th>u=2</th>\n                  <td>2</td>\n                  <td>2</td>\n                  <td>2</td>\n                  <th>u=2</th>\n                  <td>2</td>\n                  <td>0</td>\n                  <td>1</td>\n              </tr>\n          </table>\n          <table className=\"big\">\n              <tr>\n                  <th>m=2</th>\n                  <th>x=0</th>\n                  <th>x=1</th>\n                  <th>x=2</th>\n                  <th>m=&infin;</th>\n                  <th>x=0</th>\n                  <th>x=1</th>\n                  <th>x=2</th>\n              </tr>\n              <tr>\n                  <th>u=0</th>\n                  <td>0</td>\n                  <td>2</td>\n                  <td>1</td>\n                  <th>u=0</th>\n                  <td>[0, &infin;)</td>\n                  <td>[0, &infin;)</td>\n                  <td>[0, &infin;)</td>\n              </tr>\n              <tr>\n                  <th>u=1</th>\n                  <td>1</td>\n                  <td>0</td>\n                  <td>2</td>\n                  <th>u=1</th>\n                  <td>[1, &infin;)</td>\n                  <td>[1, &infin;)</td>\n                  <td>[1, &infin;)</td>\n              </tr>\n              <tr>\n                  <th>u=2</th>\n                  <td>2</td>\n                  <td>1</td>\n                  <td>0</td>\n                  <th>u=2</th>\n                  <td>[2, &infin;)</td>\n                  <td>[2, &infin;)</td>\n                  <td>[2, &infin;)</td>\n              </tr>\n          </table>\n          <p>\n            See the image below, for each <code>m</code> we have 3 set of lines corresponding to different <code>u</code>.\n            Blue correspond to <code>m=0</code>, purple <code>m=1</code>, green is <code>m=2</code> and red,\n            if you say, is <code>m=&infin;</code>.\n          </p>\n\n          <img src={order3} alt=\"Logo\" />\n\n          <p>\n            Every color or <code>m</code> value is one round and every class or <code>u</code> is a room, where 3 three\n            people are located. To put it all together, this is the full schedule for 9 people over 4 rounds:\n          </p>\n          <pre>\n             Round 1: [0, 1, 2], [3, 4, 5], [6, 7, 8] <br />\n             Round 2: [0, 4, 8], [3, 7, 2], [6, 1, 5] <br />\n             Round 3: [0, 7, 5], [3, 1, 8], [6, 4, 2] <br />\n             Round 4: [0, 3, 6], [1, 4, 7], [2, 5, 8] <br />\n          </pre>\n          <p>\n              You can do it in the same way for any other <code>n</code>-<em>prime</em> (<code>n=2, 3, 5, 7, 11,...</code>).\n              However, finite / Galois fields exist also for prime factors, i.e. <code>n=p<sup>m</sup></code>. Construction\n              for <code>n=2<sup>2</sup></code> you can see in [3].\n          </p>\n          <p>If you need to make schedule for less than 9 people, e.g. 7 you can remove 7 and 8 from the table.</p>\n\n          <h3>Python script</h3>\n          <p>There is trivial script for constructing lines for affine plane for prime order.</p>\n          <ReactEmbedGist\n              gist=\"matejker/8606d661d21885e27d0965e4c5553bff\"\n              wrapperClass=\"gist__bash\"\n              loadingClass=\"loading__screen\"\n              titleClass=\"gist__title\"\n              contentClass=\"gist__content\"\n              errorClass=\"gist__error\"/>\n          <h3>References:</h3>\n          <ol>\n            <li>\n              Pascoe, Abraham, \"<em>Affine and Projective Planes</em>\" (2018). MSU Graduate Theses.\n              3233. <a href=\"https://bearworks.missouristate.edu/theses/3233\">Link</a>\n            </li>\n            <li>\n              Bartlett, Padraic, \"<em>Minilecture 5: Affine Planes</em>\" (2014).\n              <a href=\"http://web.math.ucsb.edu/~padraic/ucsb_2013_14/mathcs103_w2014/mathcs103_w2014_lecture5.pdf\">Link</a>\n            </li>\n              <li>von Gagern, Martin, \"<em>Affine Plane of Order 4 Picture?</em>\" (2016). Mathematics Stack Exchange.\n                  <a href=\"https://math.stackexchange.com/questions/1925479/affine-plane-of-order-4-picture\">Link</a></li>\n          </ol>\n        </div>\n    </div>\n  );\n}\n\nexport default Theory;\n\n<script src=\"https://gist.github.com/matejker/8606d661d21885e27d0965e4c5553bff.js\"></script>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport Story from './Story';\nimport Theory from './Theory';\n\nexport const Index = () => {\n\n    return (\n        <Router>\n            <h1>Affine Break Out Room</h1>\n            <menu>\n                <li><Link to=\"/affine-break-out/\">Home</Link></li>\n                <li><Link to=\"/affine-break-out//story\">Story</Link></li>\n                <li><Link to=\"/affine-break-out//theory\">Theory</Link></li>\n            </menu>\n            <Switch>\n                <Route path=\"/affine-break-out/story\" component={Story} />\n                <Route path=\"/affine-break-out/theory\" component={Theory} />\n                <Route path=\"/affine-break-out/\" component={App} />\n            </Switch>\n            <footer>\n                &copy; Matej Kerekrety 2021\n            </footer>\n        </Router>\n    );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}