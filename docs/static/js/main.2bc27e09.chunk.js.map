{"version":3,"sources":["core.js","App.js","Story.js","Chart.js","Theory.js","index.js"],"names":["PRIMES","FiniteFieldMultiply","a","b","m","r","d","prod","temp_a","temp_b","AffineBreakOut","SkipReminder","k","n","slice","p","reverse","ClosestPrimeSqrt","rounds","i","Array","j","t","u","x","y","App","props","handleChange","event","setState","groupSize","target","value","handleSubmit","state","preventDefault","this","BreakOut","className","onSubmit","type","onChange","size","min","max","map","round","room","join","React","Component","Story","to","href","Chart","label","showLine","borderColor","pointRadius","pointHitRadius","cubicInterpolationMode","data","labels","datasets","Options","responsive","aspectRatio","animation","scales","ticks","stepSize","plugins","legend","display","tooltip","enabled","Theory","data3","data4","data5","data7","data8","options","gist","wrapperClass","loadingClass","titleClass","contentClass","errorClass","file","Index","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bc27e09.chunk.js","sourcesContent":["export const PRIMES = [1, 2, 3, 4, 5, 7, 8, 11];\n\n\nexport const ClosestPrimeSqrt = (m) => {\n    let n = PRIMES.slice(-1)[0];\n    for (let p in PRIMES.reverse()) {\n        if (PRIMES[p] * PRIMES[p] >= m) {\n            n = PRIMES[p];\n        } else {\n            return n;\n        }\n    }\n};\n\nexport const FiniteFieldMultiply = (a, b, m) => {\n    let r = 11;\n    let d = 2;\n\n    if (m == 16) {\n        r = 7;\n        d = 1;\n    }\n\n    let prod = 0;\n    let temp_a = a;\n    let temp_b = b;\n    while (temp_a && temp_b) {\n        if (temp_b & 1) {\n            prod = prod ^ temp_a;\n        }\n\n        temp_b = temp_b >> 1;\n\n        if (temp_a & (1 << d)) {\n            temp_a = (temp_a << 1) ^ r;\n        } else {\n            temp_a = temp_a << 1;\n        }\n    }\n    return prod;\n};\n\nexport const AffineBreakOut = (m) =>  {\n    const SkipReminder = (k) => {\n        return (k < m) ? k : \"N\";\n    };\n\n    const n = ClosestPrimeSqrt(m);\n    let rounds = [n + 1];\n    for (let i = 0; i < n + 1; i++) {\n        rounds[i] = new Array(n);\n        for (let j = 0; j < n; j++) {\n            rounds[i][j] = new Array(n);\n        }\n    }\n\n    if (n === 4 || n === 8) {\n        for (let t = 0; t < n; t++) {\n            for (let u = 0; u < n; u++) {\n                for (let x = 0; x < n; x++) {\n                    rounds[t][u][x] = SkipReminder(x + ((FiniteFieldMultiply(t, x, n * n) ^ u) * n));\n                }\n            }\n        }\n    } else {\n        for (let t = 0; t < n; t++) {\n            for (let u = 0; u < n; u++) {\n                for (let x = 0; x < n; x++) {\n                    rounds[t][u][x] = SkipReminder(x + ((t * x + u) % n) * n);\n                }\n            }\n        }\n    }\n\n    for (let x = 0; x < n; x++) {\n        for (let y = 0; y < n; y++) {\n            rounds[n][x][y] = SkipReminder(x + y * n);\n        }\n    }\n\n    return rounds\n};\n","import React from 'react';\nimport './App.css';\nimport { AffineBreakOut } from './core';\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {groupSize: 25};\n  }\n\n    handleChange = (event) => {\n      this.setState({groupSize: event.target.value});\n  };\n\n  handleSubmit = (event) => {\n      this.setState({groupSize: this.state.groupSize});\n      event.preventDefault();\n  };\n\n    render() {\n    const m = (this.state.groupSize > 1) ? this.state.groupSize : 2;\n    const BreakOut = AffineBreakOut(m);\n\n    return (\n      <div className=\"App\">\n        <form onSubmit={this.handleSubmit} className=\"Search\">\n          <label>\n            Your group size:\n            <input type=\"number\" value={this.state.groupSize} onChange={this.handleChange} size=\"3\" min=\"2\" max=\"121\"/> (2-121)\n          </label>\n        </form>\n        <div className=\"App-header\">\n            {\n                BreakOut.map((round, i) => (\n                    <p>\n                        <strong>Round {i + 1}</strong>: {round.map((room) => <span>[{room.join(\", \")}] </span>)}\n                    </p>\n                ))\n            }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nfunction Story() {\n    return (\n        <div className=\"App\">\n            <div className=\"App-text\">\n                <p>\n                    Once upon a time, we wanted to split 21 people into reasonable sized groups over a couple of\n                    rounds such that everyone see each other exactly once. We couldn't solve it. Few years later,\n                    I looked back and realised that by using <em>affine planes</em> it can be easily <em>solved</em>.\n                </p>\n                <p>\n                    <em>Affine plane</em> is a concept in abstract algebra / geometry, which allows us to solve this\n                    problem. Therefore, the name - <em>Affine Break Out Room</em>. More details\n                    in the <Link to=\"./theory\">theory</Link> part.\n                </p>\n\n                <pre>\n                  Round 1: [0, 1, 2, 3, 4] [5, 6, 7, 8, 9] [10, 11, 12, 13, 14] [15, 16, 17, 18, 19] [20, N, N, N, N]<br />\n                  Round 2: [0, 6, 12, 18, N] [5, 11, 17, N, 4] [10, 16, N, 3, 9] [15, N, 2, 8, 14] [20, 1, 7, 13, 19]<br />\n                  Round 3: [0, 11, N, 8, 19] [5, 16, 2, 13, N] [10, N, 7, 18, 4] [15, 1, 12, N, 9] [20, 6, 17, 3, 14]<br />\n                  Round 4: [0, 16, 7, N, 14] [5, N, 12, 3, 19] [10, 1, 17, 8, N] [15, 6, N, 13, 4] [20, 11, 2, 18, 9]<br />\n                  Round 5: [0, N, 17, 13, 9] [5, 1, N, 18, 14] [10, 6, 2, N, 19] [15, 11, 7, 3, N] [20, 16, 12, 8, 4]<br />\n                  Round 6: [0, 5, 10, 15, 20] [1, 6, 11, 16, N] [2, 7, 12, 17, N] [3, 8, 13, 18, N] [4, 9, 14, 19, N]<br />\n                </pre>\n                <p>\n                    We are aware that there are other ways how to solve this problem, e.g. using <em>Kirkman\n                    Triple System</em>, which can split 21 people into 7 groups over 10 rounds perfectly. Other\n                    solutions are either inefficient (10 rounds per 3 people) or don't include all pairs. Therefore,\n                    affine plane sounds like reasonable solution for small group sizes. For other group sizes, I\n                    recommend to use <a href=\"http://breakoutroom.pythonanywhere.com/allocate/\">BoRAT</a> - a handy\n                    tool with a nice <a href=\"https://www.mdpi.com/2073-8994/13/1/13\">paper</a> about it.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Story;\n","import { FiniteFieldMultiply } from './core';\n\n\nexport const Chart = (n) => {\n    const a = [(n + 1) * n];\n    for (let t = 0; t < n; t++) {\n        for (let u = 0; u < n; u++) {\n            a[t * n + u] = {\n                label: `${t}x+${u}`,\n                showLine: true,\n                borderColor: `rgba(${80*(3-t%3)}, ${80*(t)}, ${80*(t%3+1)}, 1)`,\n                pointRadius: 5,\n                pointHitRadius: 5,\n                cubicInterpolationMode: 'monotone',\n                data: new Array(n)\n            };\n            for (let x = 0; x < n; x++) {\n                a[t * n + u].data[x] = (n % 2) ? {x, y: (t * x + u) % n} : {x, y: (FiniteFieldMultiply(t, x, n*n) ^ u)};\n            }\n        }\n    }\n    for (let x = 0; x < n; x++) {\n        a[(n+1)*(n-1)+x+1] = {\n            label: `inf${x}+`,\n            showLine: true,\n            borderColor: `rgba(${80*(1-n%2)}, ${80*(n)}, ${80*(n%2)}, 1)`,\n            pointRadius: 5,\n            pointHitRadius: 5,\n            cubicInterpolationMode: 'monotone',\n            data: new Array(n)\n        };\n        for (let y = 0; y < n; y++) {\n            a[(n+1)*(n-1)+x+1].data[y] = {x: x, y: y};\n        }\n    }\n\n    return {\n        labels: ['Scatter'],\n        datasets: a\n    };\n};\n\nexport const Options = {\n    responsive: true,\n    aspectRatio: 1,\n    animation: false,\n    scales: {\n        y: {\n            ticks: {\n                stepSize: 1\n            }\n        },\n        x: {\n            ticks: {\n                stepSize: 1\n            }\n        }\n    },\n    plugins: {\n        legend: {\n            display: false,\n        },\n        tooltip: {\n            enabled: false\n        }\n    }\n};\n","import React from 'react';\nimport ReactEmbedGist from 'react-embed-gist';\nimport { Scatter } from 'react-chartjs-2';\nimport { Chart, Options } from './Chart'\nfunction Theory() {\n  const data3 = Chart(3);\n  const data4 = Chart(4);\n  const data5 = Chart(5);\n  const data7 = Chart(7);\n  const data8 = Chart(8);\n  const options = Options;\n\n  return (\n  <div className=\"App\">\n    <div className=\"App-text\">\n    <p>\n      An affine plane is a two dimensional <a href=\"https://mathworld.wolfram.com/AffineGeometry.html\">affine geometry</a> constructed\n      over a <a href=\"https://en.wikipedia.org/wiki/Finite_field\">finite field</a> (or Galois field),\n      where points and lines satisfy those axioms: [1, 2]</p>\n\n      <ul>\n        <li>Given any two points, there is a unique line joining any two points.</li>\n        <li>Each line has at least two points.</li>\n        <li>Given a point <b>P</b> and a line <b>L</b> not containing <b>P</b>,\n          there is a unique line that contains <b>P</b> and does not intersect <b>P</b></li>\n        <li>There exist three non-collinear points (points not on a single line)</li>\n      </ul>\n\n      <p>For an affine plane with finite number of points a following is true: [1]</p>\n      <ul>\n        <li>each line contains n points</li>\n        <li>each point is contained in <code>n + 1</code> distinct lines</li>\n        <li>there are <code>n<sup>2</sup></code> points in each line</li>\n        <li>there are <code>n<sup>2</sup> + n</code> lines</li>\n        <i>The number <code>n</code> is called the order of the affine plane.</i>\n      </ul>\n\n      <p>\n      Equivalently, we can replace <b>point</b> with <b>person</b> and <b>line</b> with <b>room</b>.\n      Therefore, we have:\n      </p>\n      <ul>\n        <li>each <em>room</em> contains <code>n</code> <em>persons</em></li>\n        <li>each <em>person</em> is in <code>n + 1</code> distinct <em>rooms</em></li>\n        <li>there are <code>n<sup>2</sup></code> <em>persons</em> in total</li>\n        <li>there are <code>n<sup>2</sup> + n</code> <em>rooms</em></li>\n      </ul>\n\n      <h3>Example: Affine plane of order 3 or how to break out 9 people</h3>\n      <p>\n      Let's take a field <strong>F<sub>3</sub></strong> with elements <code>{\"{0, 1, 2}\"}</code> with\n      addition and multiplication. [3]</p>\n      <table>\n        <tr>\n          <th>+</th>\n          <th>0</th>\n          <th>1</th>\n          <th>2</th>\n        </tr>\n        <tr>\n          <th>0</th>\n          <td>0</td>\n          <td>1</td>\n          <td>2</td>\n        </tr>\n        <tr>\n          <th>1</th>\n          <td>1</td>\n          <td>2</td>\n          <td>0</td>\n        </tr>\n        <tr>\n          <th>2</th>\n          <td>2</td>\n          <td>0</td>\n          <td>1</td>\n        </tr>\n      </table>\n\n      <table>\n        <tr>\n          <th>x</th>\n          <th>0</th>\n          <th>1</th>\n          <th>2</th>\n        </tr>\n        <tr>\n          <th>0</th>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n        </tr>\n        <tr>\n          <th>1</th>\n          <td>0</td>\n          <td>1</td>\n          <td>2</td>\n        </tr>\n        <tr>\n          <th>2</th>\n          <td>0</td>\n          <td>2</td>\n          <td>1</td>\n        </tr>\n      </table>\n\n      <p>\n      Now, each point is defined as a pair <code>x, y &isin; <strong>F<sub>3</sub></strong></code>,\n      therefore, the total number of points is <code>n<sup>2</sup></code>. Then we can draw lines given\n      by <code>y = mx + u</code>, where <code>m, u &isin; <strong>F<sub>3</sub></strong></code>.\n      Each <code>m</code> give us a set of distinct lines for each <code>u</code>.\n      </p>\n      <table className=\"big\">\n        <tr>\n          <th>m=0</th>\n          <th>x=0</th>\n          <th>x=1</th>\n          <th>x=2</th>\n          <th>m=1</th>\n          <th>x=0</th>\n          <th>x=1</th>\n          <th>x=2</th>\n        </tr>\n        <tr>\n          <th>u=0</th>\n          <td>0</td>\n          <td>0</td>\n          <td>0</td>\n          <th>u=0</th>\n          <td>0</td>\n          <td>1</td>\n          <td>2</td>\n        </tr>\n        <tr>\n          <th>u=1</th>\n          <td>1</td>\n          <td>1</td>\n          <td>1</td>\n          <th>u=1</th>\n          <td>1</td>\n          <td>2</td>\n          <td>0</td>\n        </tr>\n        <tr>\n          <th>u=2</th>\n          <td>2</td>\n          <td>2</td>\n          <td>2</td>\n          <th>u=2</th>\n          <td>2</td>\n          <td>0</td>\n          <td>1</td>\n        </tr>\n      </table>\n      <table className=\"big\">\n        <tr>\n          <th>m=2</th>\n          <th>x=0</th>\n          <th>x=1</th>\n          <th>x=2</th>\n          <th>m=&infin;</th>\n          <th>x=0</th>\n          <th>x=1</th>\n          <th>x=2</th>\n        </tr>\n        <tr>\n          <th>u=0</th>\n          <td>0</td>\n          <td>2</td>\n          <td>1</td>\n          <th>u=0</th>\n          <td>[0, &infin;)</td>\n          <td>[0, &infin;)</td>\n          <td>[0, &infin;)</td>\n        </tr>\n        <tr>\n          <th>u=1</th>\n          <td>1</td>\n          <td>0</td>\n          <td>2</td>\n          <th>u=1</th>\n          <td>[1, &infin;)</td>\n          <td>[1, &infin;)</td>\n          <td>[1, &infin;)</td>\n        </tr>\n        <tr>\n          <th>u=2</th>\n          <td>2</td>\n          <td>1</td>\n          <td>0</td>\n          <th>u=2</th>\n          <td>[2, &infin;)</td>\n          <td>[2, &infin;)</td>\n          <td>[2, &infin;)</td>\n        </tr>\n      </table>\n      <p>\n      See the image below, for each <code>m</code> we have 3 set of lines corresponding to different <code>u</code>.\n      Red correspond to <code>m=0</code>, purple <code>m=1</code>, blue is <code>m=2</code> and green,\n      if you say, is <code>m=&infin;</code>.\n      </p>\n\n      <div className={\"chart\"}><Scatter data={data3} className={\"chart\"} options={options} /></div>\n\n      <p>\n      Every color or <code>m</code> value is one round and every class or <code>u</code> is a room, where 3 three\n      people are located. To put it all together, this is the full schedule for 9 people over 4 rounds:\n      </p>\n      <pre>\n       Round 1: [0, 1, 2], [3, 4, 5], [6, 7, 8] <br />\n       Round 2: [0, 4, 8], [3, 7, 2], [6, 1, 5] <br />\n       Round 3: [0, 7, 5], [3, 1, 8], [6, 4, 2] <br />\n       Round 4: [0, 3, 6], [1, 4, 7], [2, 5, 8] <br />\n      </pre>\n      <p>\n        You can do it in the same way for any other <code>n</code>-<em>prime</em> (<code>n=2, 3, 5, 7, 11,...</code>).\n        However, finite / Galois fields exist also for prime factors such as <code>n=p<sup>m</sup></code>. The\n        construction and arithmetic on such fields is a bit harder to explain, and therefore, you can nice construction\n        of <code>n=2<sup>2</sup></code> in Stackexchange [3].\n      </p>\n      <p>If you need to make schedule for less than 9 people, e.g. 7 you can remove 7 and 8 from the table.</p>\n\n      <h3>Lines on affine plane of order 4</h3>\n        <div className={\"chart\"}><Scatter data={data4} className={\"chart\"} options={options} /></div>\n      <h3>Lines on affine plane of order 5</h3>\n      <div className={\"chart\"}><Scatter data={data5} className={\"chart\"} options={options} /></div>\n      <h3>Lines on affine plane of order 7</h3>\n      <div className={\"chart\"}><Scatter data={data7} className={\"chart\"} options={options} /></div>\n      <h3>Lines on affine plane of order 8</h3>\n      <div className={\"chart\"}><Scatter data={data8} className={\"chart\"} options={options} /></div>\n\n      <h3>Arithmetic on finite fields of order 2<sup>n</sup></h3>\n      <p>\n        Basic operations on finite fields of prime order are pretty simple every calculation is <code>(mod p)</code>.\n        However, for prime factor orders fields it is way harder. Fortunately, for fields of order <code>2<sup>n</sup></code>\n        we can construct the arithmetic using bitewise operations such as those described in [4] and the script below.\n      </p>\n      <ReactEmbedGist\n        gist=\"matejker/e88719bf5fd0e0e41eeeaa917a0ff583\"\n        wrapperClass=\"gist__bash\"\n        loadingClass=\"loading__screen\"\n        titleClass=\"gist__title\"\n        contentClass=\"gist__content\"\n        errorClass=\"gist__error\"\n        file=\"BinaryFiniteField.py\"\n      />\n      <h3>References:</h3>\n      <ol>\n      <li>\n        Pascoe, Abraham, \"<em>Affine and Projective Planes</em>\" (2018). MSU Graduate Theses.\n        3233. <a href=\"https://bearworks.missouristate.edu/theses/3233\">Link</a>\n      </li>\n      <li>\n        Bartlett, Padraic, \"<em>Minilecture 5: Affine Planes</em>\" (2014).\n        <a href=\"http://web.math.ucsb.edu/~padraic/ucsb_2013_14/mathcs103_w2014/mathcs103_w2014_lecture5.pdf\">Link</a>\n      </li>\n        <li>von Gagern, Martin, \"<em>Affine Plane of Order 4 Picture?</em>\" (2016). Mathematics Stack Exchange.\n          <a href=\"https://math.stackexchange.com/questions/1925479/affine-plane-of-order-4-picture\">Link</a></li>\n          <li>Kerl, John, \"<em>Computation in finite fields\" (2004).</em>\" <a href={\"https://johnkerl.org/doc/ffcomp.pdf\"}>Link</a></li>\n      </ol>\n\n    </div>\n  </div>\n  );\n}\n\nexport default Theory;\n\n<script src=\"https://gist.github.com/matejker/8606d661d21885e27d0965e4c5553bff.js\"></script>\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport Story from './Story';\nimport Theory from './Theory';\n\nexport const Index = () => {\n\n    return (\n        <Router>\n            <h1>Affine Break Out Room</h1>\n            <menu>\n                <li><Link to=\"/affine-break-out/\">Home</Link></li>\n                <li><Link to=\"/affine-break-out/story\">Story</Link></li>\n                <li><Link to=\"/affine-break-out/theory\">Theory</Link></li>\n            </menu>\n            <Switch>\n                <Route path=\"/affine-break-out/story\" component={Story} />\n                <Route path=\"/affine-break-out/theory\" component={Theory} />\n                <Route path=\"/affine-break-out/\" component={App} />\n            </Switch>\n            <footer>\n                &copy; Matej Kerekrety 2021\n            </footer>\n        </Router>\n    );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Index />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}